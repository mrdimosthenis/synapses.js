const assert = require('assert');
const csv = require('csv-parser');
const fs = require('fs');
const syn = require('../src/index');

const dataPoints = [];
fs.createReadStream('./scala-synapses/test-resources/mnist_mini.csv')
    .pipe(csv())
    .on('data', (row) => {
        dataPoints.push(row);
    })
    .on('end', () => {

        describe('preprocessor tests', function () {

            let loadedPreprocessorJson = fs.readFileSync('./scala-synapses/test-resources/preprocessor_mini.json');

            let loadedPreprocessor = new syn.codec({json: loadedPreprocessorJson});

            let pixelKeysWithFlags = [...Array(784).keys()]
                .map(x => ["pixel" + x, false]);

            let keysWithDiscreteFlags = [["label", true], ...pixelKeysWithFlags];

            let preprocessor = new syn.codec({
                attributes: keysWithDiscreteFlags,
                data: dataPoints
            });

            let preprocessorJson = preprocessor.json();

            let firstDatapoint = dataPoints[0];

            let firstEncodedDatapoint = preprocessor.encode(firstDatapoint);

            it('codec of/to json', function () {
                assert.equal(
                    new syn.codec({json: preprocessorJson}).json(),
                    preprocessorJson
                );
            });

            it('codec of json', function () {
                assert.equal(
                    loadedPreprocessor.json(),
                    preprocessor.json()
                );
            });

            it('first encoded datapoint', function () {
                assert.deepEqual(
                    firstEncodedDatapoint,
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
                        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
                        0.5, 0.5, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
                        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7401574803149606, 1.0, 0.3715415019762846, 0.0, 0.0, 0.0,
                        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.7490196078431373, 0.9803921568627451, 0.9921568627450981, 0.36470588235294116, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5,
                        0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4823529411764706,
                        0.9725490196078431, 0.9921568627450981, 0.6549019607843137, 0.0392156862745098, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5,
                        0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3137254901960784,
                        0.9686274509803922, 0.9921568627450981, 0.8188976377952756, 0.050980392156862744, 0.0, 0.0, 0.0, 0.0, 0.5,
                        0.5, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11372549019607843,
                        0.8117647058823529, 0.9921568627450981, 0.9215686274509803, 0.30196078431372547, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5,
                        0.5, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.21176470588235294,
                        0.8196078431372549, 0.9921568627450981, 0.9921568627450981, 0.34509803921568627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.36470588235294116,
                        0.996078431372549, 0.9921568627450981, 0.9333333333333333, 0.6666666666666666, 0.06666666666666667, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.09019607843137255, 0.8235294117647058, 0.996078431372549, 0.9921568627450981, 0.6235294117647059, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.06274509803921569, 0.8196078431372549, 0.9921568627450981, 0.996078431372549, 0.9411764705882353,
                        0.3176470588235294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.10588235294117647, 0.9921568627450981, 0.9921568627450981, 0.996078431372549,
                        0.050980392156862744, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0784313725490196, 0.807843137254902, 0.996078431372549, 0.996078431372549,
                        0.7764705882352941, 0.027450980392156862, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5,
                        0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6588235294117647, 0.9921568627450981, 0.9921568627450981,
                        0.7686274509803922, 0.027450980392156862, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5,
                        0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0784313725490196, 0.796078431372549, 0.9921568627450981,
                        0.9725490196078431, 0.2980392156862745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5,
                        0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08627450980392157, 0.7372549019607844, 0.9921568627450981,
                        0.9607843137254902, 0.36470588235294116, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.403921568627451, 0.9921568627450981, 0.9921568627450981,
                        0.7490196078431373, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.34901960784313724, 0.9411764705882353, 0.9921568627450981, 0.7647058823529411,
                        0.09803921568627451, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.058823529411764705, 0.8627450980392157, 0.9921568627450981, 0.9921568627450981,
                        0.3137254901960784, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 0.5,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.3686274509803922, 0.9921568627450981, 0.9921568627450981, 0.9921568627450981,
                        0.3686274509803922, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 0.5,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.34901960784313724, 0.984313725490196, 0.9921568627450981, 0.9803921568627451,
                        0.5137254901960784, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 0.5,
                        0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8392156862745098, 0.8549019607843137, 0.37254901960784315, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
                        0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5,
                        0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.0, 0.0, 0.5, 0.5, 0.5, 0.5,
                        0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
                );
            });

            it('first encoded decoded datapoint', function () {
                assert.deepEqual(
                    preprocessor.encode(preprocessor.decode(firstEncodedDatapoint)),
                    firstEncodedDatapoint
                );
            });

        });
    });
